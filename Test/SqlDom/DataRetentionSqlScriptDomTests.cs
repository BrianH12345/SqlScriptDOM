using Microsoft.SqlServer.TransactSql.ScriptDom;
using Microsoft.SqlServer.TransactSql.ScriptDom.Versioning;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using SqlStudio.Tests.AssemblyTools.TestCategory;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;


namespace SqlStudio.Tests.UTSqlScriptDom
{
    [TestClass]
    class DataRetentionSqlScriptDomTests
    {
        // The VerifyDataRetention class is a helper class for verifying the DataRetention language components (parsing and generation) 
        // of the data retention features.
        //
        // An instance of VerifyDataRetention acts as visitor to the ScriptDom Parser and SqlScriptGenerator
        // for handling the DataRetentionTableOption node.
        // 
        // The first purpose of the class is to ensure that for all possible valid combination
        // and easily mistaken invalid combination of the DataRetention table option ddl syntax the 
        // correct properties are set on the DataRetentionTable option object by the ScriptDom parser.
        //
        // The second purpose of the class is to verify that the when certain properties are set
        // on the DataRetentionTableOption object the expected string is generated by the
        // SqlScriptGenerator.
        //
        // Finally the class provides helper methods for creating the expected DataRetentionTableOption
        // object and scripts to validate against the object and script created by DacFx.
        //
        private class VerifyDataRetentionObject : VersioningVisitor
        {
            public VerifyDataRetentionObject(string table_name = "test")
                : base(SqlEngineType.Standalone, SqlVersion.Sql150)
            {
                ExpectedObj = new DataRetentionTableOption();
                ExpectedObj.RetentionPeriod = new RetentionPeriodDefinition();
                ExpectedObj.RetentionPeriod.Duration = new IntegerLiteral();
                UpdateDefaultToken("table_name", table_name);
            }

            public DataRetentionTableOption ExpectedObj;

            public bool ReverseParameter { get; set; }

            private string createTableWithRetentionOnTemplate =
                @"CREATE TABLE {0} (id datetime, timestamp datetime2, status int) WITH ( DATA_DELETION = {1} ( {2} {3} {4}{5} {6} {7} {8} {9} ))";

            private string createTableWithRetentionOnTemplateReverse =
                @"CREATE TABLE {0} (id datetime, timestamp datetime2, status int) WITH ( DATA_DELETION = {1} ( {6} {7} {8} {9}{5} {2} {3} {4} ))";

            private string createTableWithRetentionOffTemplate =
                @"CREATE TABLE {0} (id datetime, timestamp datetime2, status int) WITH ( DATA_DELETION = {1} )";

            private string alterTableWithRetentionOnTemplate =
                @"ALTER TABLE {0} SET ( DATA_DELETION = {1} ( {2} {3} {4}{5} {6} {7} {8} {9} ))";

            private string alterTableWithRetentionOffTemplate =
                @"ALTER TABLE {0} SET ( DATA_DELETION = {1} )";

            private string alterTableWithRetentionOnTemplateReverse =
                @"ALTER TABLE {0} SET ( DATA_DELETION = {1} ( {6} {7} {8} {9}{5} {2} {3} {4} ))";


            private Dictionary<string, int> DefaultTokenLookUp = new Dictionary<string, int>()
            {
                {"table_name", 0},
                {"OptionState", 1},
                {"filter_column", 2},
                {"filter_equal_sign", 3},
                {"filterColumnName", 4},
                {"comma", 5},
                {"retention_period", 6},
                {"retention_equal_sign", 7},
                {"durationOrInfinite", 8} ,
                {"retentionPeriodUnit", 9}
            };

            private string[] DefaultTokenValue = { "", "", "FILTER_COLUMN", "=", "", ",", "RETENTION_PERIOD", "=", "", "" };

            private enum ScriptTemplate
            {
                createTableWithDataDeletionOn,
                createTableWithDataDeletionOnReverse,
                createTableWithDataDeletionOff,
                alterTableWithDataDeletionOn,
                alterTableWithDataDeletionOff,
                alterTableWithDataDeletionOnReverse
            };

            private ScriptTemplate templateToUse;

            public string DefaultSqlString { get; set; }

            public string SqlString
            {
                get
                {
                    if (!String.IsNullOrEmpty(DefaultSqlString))
                    {
                        return DefaultSqlString;
                    }
                    switch (templateToUse)
                    {
                        case ScriptTemplate.createTableWithDataDeletionOn:
                            {
                                return string.Format(createTableWithRetentionOnTemplate, DefaultTokenValue);
                            }
                        case ScriptTemplate.createTableWithDataDeletionOnReverse:
                            {
                                return string.Format(createTableWithRetentionOnTemplateReverse, DefaultTokenValue);
                            }
                        case ScriptTemplate.createTableWithDataDeletionOff:
                            {
                                return string.Format(createTableWithRetentionOffTemplate, DefaultTokenValue[DefaultTokenLookUp["table_name"]], DefaultTokenValue[DefaultTokenLookUp["OptionState"]]);
                            }
                        case ScriptTemplate.alterTableWithDataDeletionOn:
                            {
                                return string.Format(alterTableWithRetentionOnTemplate, DefaultTokenValue);
                            }
                        case ScriptTemplate.alterTableWithDataDeletionOff:
                            {
                                return string.Format(alterTableWithRetentionOffTemplate, DefaultTokenValue[DefaultTokenLookUp["table_name"]], DefaultTokenValue[DefaultTokenLookUp["OptionState"]]);
                            }
                        case ScriptTemplate.alterTableWithDataDeletionOnReverse:
                            {
                                return string.Format(alterTableWithRetentionOnTemplateReverse, DefaultTokenValue);
                            }
                    }
                    return DefaultSqlString;
                }
                set { SqlString = value; }
            }

            public override void ExplicitVisit(DataRetentionTableOption node)
            {
                VerifyGeneratedObject(node);
                // Verify the script generated from the generated object matches the expected string
                //
                VerifyScriptGeneration(node);
            }

            private void VerifyGeneratedObject(DataRetentionTableOption node)
            {
                // Verify the generated object representation of this sql script matches the expected obj representation of this sql script
                //
                string message = "For the sql script:\r\n" + SqlString + "\r\nThe expected {0} did not match the parsed {0}";
                if (!(node.FilterColumn == null && null == ExpectedObj.FilterColumn))
                {
                    Assert.AreEqual(ExpectedObj.FilterColumn.Value, node.FilterColumn.Value, string.Format(message, "FILTER_COLUMN"));
                    Assert.AreEqual(ExpectedObj.FilterColumn.QuoteType, node.FilterColumn.QuoteType, string.Format(message, "FILTER_COLUMN Identifier quote type"));
                }

                Assert.AreEqual(ExpectedObj.OptionState, node.OptionState, string.Format(message, "DATA_DELETION"));
                Assert.AreEqual(ExpectedObj.RetentionPeriod.Units, node.RetentionPeriod.Units, string.Format(message, "RETENTION_PERIOD unit value"));
                Assert.AreEqual(ExpectedObj.RetentionPeriod.IsInfinity, node.RetentionPeriod.IsInfinity, string.Format(message, "RETENTION_PERIOD value of Infinite"));
                Assert.AreEqual(ExpectedObj.RetentionPeriod.Duration.Value, node.RetentionPeriod.Duration.Value, string.Format(message, "RETENTION_PERIOD duration value"));
            }

            private void VerifyScriptGeneration(DataRetentionTableOption node)
            {
                SqlScriptGenerator gen = new Sql150ScriptGenerator();
                String script = "";
                IList<ParseError> genError = new List<ParseError>();
                gen.GenerateScript(node, out script, out genError);

                // Normalize generated script ( Lower and only one space between tokens )
                //
                String Normalizedscript = Regex.Replace(script, @"\s+", " ");
                Normalizedscript = Normalizedscript.ToLowerInvariant().Trim();

                // Normalize expected script
                // The generated script has a consistent format equivalent to createTableWithRetentionOnTemplate and alterTableWithRetentionOnTemplate
                // so if we are not using that template regenerate the script
                var newExpectedObj = new VerifyDataRetentionObject(DefaultTokenValue[DefaultTokenLookUp["table_name"]]);
                bool optionstate = ExpectedObj.OptionState == OptionState.On ? true : false;
                switch (templateToUse)
                {
                    case ScriptTemplate.createTableWithDataDeletionOn:
                    case ScriptTemplate.createTableWithDataDeletionOnReverse:
                    case ScriptTemplate.createTableWithDataDeletionOff:
                        {
                            newExpectedObj.CreateDataRetentionObject(optionstate,
                                ExpectedObj.FilterColumn == null ? "" : Identifier.EncodeIdentifier(ExpectedObj.FilterColumn.Value, ExpectedObj.FilterColumn.QuoteType),
                                false,
                                ExpectedObj.RetentionPeriod.IsInfinity,
                                ExpectedObj.RetentionPeriod.Duration.Value,
                                ExpectedObj.RetentionPeriod.Units);
                            break;
                        }
                    case ScriptTemplate.alterTableWithDataDeletionOff:
                        {
                            if (!(node.FilterColumn == null && null == ExpectedObj.FilterColumn))
                            {
                                newExpectedObj.AlterDataRetentionObject(optionstate,
                                    Identifier.EncodeIdentifier(ExpectedObj.FilterColumn.Value, ExpectedObj.FilterColumn.QuoteType));
                            }
                            else
                            {
                                newExpectedObj.AlterDataRetentionObject(optionstate, "");
                            }
                            break;
                        }
                    case ScriptTemplate.alterTableWithDataDeletionOn:
                    case ScriptTemplate.alterTableWithDataDeletionOnReverse:
                        {
                            newExpectedObj.AlterDataRetentionObject(optionstate,
                                Identifier.EncodeIdentifier(ExpectedObj.FilterColumn.Value, ExpectedObj.FilterColumn.QuoteType),
                                ExpectedObj.RetentionPeriod.IsInfinity,
                                ExpectedObj.RetentionPeriod.Duration.Value,
                                ExpectedObj.RetentionPeriod.Units);
                            break;
                        }
                }

                // Verify new expected object and old expected obj are the same 
                // and only differ by generated string
                //
                VerifyGeneratedObject(newExpectedObj.ExpectedObj);

                String NormalizedExpectedScript = Regex.Replace(newExpectedObj.SqlString, @"\s+", " ");
                NormalizedExpectedScript = NormalizedExpectedScript.ToLowerInvariant().Trim();

                Assert.IsTrue(NormalizedExpectedScript.Contains(Normalizedscript),
                    string.Format("The expected script:\r\n{0}\r\n does not have the generated string as it data retention format:\r\n{1}\r\n", NormalizedExpectedScript, Normalizedscript));

            }

            private void UpdateDefaultToken(string tokenName, string value)
            {
                DefaultTokenValue[DefaultTokenLookUp[tokenName]] = value;
            }

            // Creates all parameters of the data retention object
            //
            private void CreateDataRetentionObject(bool dataDeletionState, string filterColumnName, bool excludeRetentionsubstring,
                bool retentionPeriodIsInfinty, string integerLiteral, TemporalRetentionPeriodUnit unit)
            {
                bool excludeFilterCol = String.IsNullOrEmpty(filterColumnName);
                UpdateDefaultToken("filterColumnName", filterColumnName);
                ExpectedObj.FilterColumn = NormalizeFilterColumn(filterColumnName);
                if (dataDeletionState)
                {
                    ExpectedObj.OptionState = OptionState.On;
                    UpdateDefaultToken("OptionState", "ON");
                    templateToUse = ReverseParameter ? ScriptTemplate.createTableWithDataDeletionOnReverse : ScriptTemplate.createTableWithDataDeletionOn;
                }
                else
                {
                    ExpectedObj.OptionState = OptionState.Off;
                    UpdateDefaultToken("OptionState", "OFF");
                    ExpectedObj.FilterColumn = null;
                    templateToUse = ScriptTemplate.createTableWithDataDeletionOn;
                }

                ExpectedObj.RetentionPeriod.IsInfinity = retentionPeriodIsInfinty;
                ExpectedObj.RetentionPeriod.Duration.Value = integerLiteral;
                if (ExpectedObj.RetentionPeriod.IsInfinity)
                {
                    UpdateDefaultToken("durationOrInfinite", "INFINITE");
                    Assert.AreEqual(integerLiteral, "-1", "Retention duration must be -1 if Retention value is infinite");
                }
                else
                {
                    UpdateDefaultToken("durationOrInfinite", integerLiteral);
                    UpdateDefaultToken("retentionPeriodUnit", unit.ToString());
                    ExpectedObj.RetentionPeriod.Units = unit;
                }

                if (ReverseParameter)
                {
                    bool temp = excludeRetentionsubstring;
                    excludeRetentionsubstring = excludeFilterCol;
                    excludeFilterCol = temp;
                }

                if (excludeFilterCol && excludeRetentionsubstring)
                {
                    templateToUse = ScriptTemplate.createTableWithDataDeletionOff;
                }

                if (excludeRetentionsubstring)
                {
                    for (int i = DefaultTokenLookUp["comma"]; i < DefaultTokenValue.Length; i++)
                    {
                        DefaultTokenValue[i] = "";
                    }
                }

                if (excludeFilterCol)
                {
                    for (int i = DefaultTokenLookUp["comma"]; i > 1; i--)
                    {
                        DefaultTokenValue[i] = "";
                    }
                }
            }

            private Identifier NormalizeFilterColumn(string filterName)
            {
                Identifier filterCol = new Identifier();
                if (!string.IsNullOrEmpty(filterName))
                {
                    QuoteType quote;
                    filterCol.Value = Identifier.DecodeIdentifier(filterName, out quote);
                    filterCol.QuoteType = quote;
                }
                return filterCol;
            }

            // Used to create the object that represents the string 
            // DATA_DELETION dataDeletionState ( RETENTION_PERIOD = integerLiteral unit )
            //
            public void CreateDataRetentionObject(bool dataDeletionState, string integerLiteral, TemporalRetentionPeriodUnit unit)
            {
                CreateDataRetentionObject(dataDeletionState, "", false, false, integerLiteral, unit);
            }

            // Used to create the object that represents the string 
            // DATA_DELETION dataDeletionState ( FILTER_COLUMN = filterColumnName, RETENTION_PERIOD = integerLiteral unit )
            //
            public void CreateDataRetentionObject(bool dataDeletionState, string filterColumnName, string integerLiteral, TemporalRetentionPeriodUnit unit)
            {
                CreateDataRetentionObject(dataDeletionState, filterColumnName, false, false, integerLiteral, unit);
            }

            // Used to create the object that represents the string 
            // DATA_DELETION dataDeletionState ( FILTER_COLUMN = filterColumnName, RETENTION_PERIOD = Infinite)
            //
            public void CreateDataRetentionObject(bool dataDeletionState, string filterColumnName, bool retentionPeriodIsInfinty)
            {
                CreateDataRetentionObject(dataDeletionState, filterColumnName, false, retentionPeriodIsInfinty, "-1", TemporalRetentionPeriodUnit.Day);
            }

            // Used to create the object that represents the string 
            // DATA_DELETION dataDeletionState ( FILTER_COLUMN = filterColumnName )
            //
            public void CreateDataRetentionObject(bool dataDeletionState, string filterColumnName)
            {
                CreateDataRetentionObject(dataDeletionState, filterColumnName, true, true, "-1", TemporalRetentionPeriodUnit.Day);
            }

            // Used to alter the object that represents the string 
            // DATA_DELETION dataDeletionState ( FILTER_COLUMN = filterColumnName, RETENTION_PERIOD = 1 day )
            //
            private void AlterDataRetentionObject(bool dataDeletionState, string filterColumnName, string integerLiteral, TemporalRetentionPeriodUnit unit)
            {
                Assert.AreNotEqual(ExpectedObj, null, "The data retention object must have been created");
                UpdateDefaultToken("filterColumnName", filterColumnName);
                UpdateDefaultToken("OptionState", dataDeletionState ? "ON" : "OFF");
                ExpectedObj.FilterColumn = NormalizeFilterColumn(filterColumnName);
                ExpectedObj.OptionState = dataDeletionState ? OptionState.On : OptionState.Off;
                Assert.AreNotEqual(ExpectedObj.RetentionPeriod, null, "The data retention object retention period must have been created");
                ExpectedObj.RetentionPeriod.Units = unit;
                ExpectedObj.RetentionPeriod.Duration.Value = integerLiteral;
                UpdateDefaultToken("durationOrInfinite", integerLiteral);
                UpdateDefaultToken("retentionPeriodUnit", unit.ToString());
                bool excludeFilterCol = String.IsNullOrEmpty(filterColumnName);
                templateToUse = ReverseParameter ? ScriptTemplate.alterTableWithDataDeletionOnReverse : ScriptTemplate.alterTableWithDataDeletionOn;
                if (excludeFilterCol)
                {
                    for (int i = DefaultTokenLookUp["comma"]; i > 1; i--)
                    {
                        DefaultTokenValue[i] = "";
                    }
                }
            }

            // Used to alter the object that represents the string 
            // DATA_DELETION dataDeletionState ( FILTER_COLUMN = filterColumnName )
            //
            public void AlterDataRetentionObject(bool dataDeletionState, string filterColumnName)
            {
                AlterDataRetentionObject(dataDeletionState, filterColumnName, "-1", TemporalRetentionPeriodUnit.Day);
                ExpectedObj.RetentionPeriod.IsInfinity = true;
                UpdateDefaultToken("durationOrInfinite", "INFINITE");
                UpdateDefaultToken("retentionPeriodUnit", "");
                Assert.AreEqual(ExpectedObj.RetentionPeriod.Duration.Value, "-1", "When the retention period is Infinite do not specify the string literal and unit");

                // Exclude retention portion
                //
                for (int i = DefaultTokenLookUp["comma"]; i < DefaultTokenValue.Length; i++)
                {
                    DefaultTokenValue[i] = "";
                }

                if (String.IsNullOrEmpty(filterColumnName))
                {
                    ExpectedObj.FilterColumn = null;
                    templateToUse = ScriptTemplate.alterTableWithDataDeletionOff;
                }
            }

            // Used to alter the object that represents the string 
            // DATA_DELETION dataDeletionState ( FILTER_COLUMN = filterColumnName, RETENTION_PERIOD = Infinite )
            // or DATA_DELETION dataDeletionState ( FILTER_COLUMN = filterColumnName, RETENTION_PERIOD = 1 day )
            public void AlterDataRetentionObject(bool dataDeletionState, string filterColumnName, bool IsInfinity, string integerLiteral = "-1", TemporalRetentionPeriodUnit unit = TemporalRetentionPeriodUnit.Day)
            {
                AlterDataRetentionObject(dataDeletionState, filterColumnName, integerLiteral, unit);
                if (IsInfinity)
                {
                    ExpectedObj.RetentionPeriod.IsInfinity = IsInfinity;
                    UpdateDefaultToken("durationOrInfinite", "INFINITE");
                    UpdateDefaultToken("retentionPeriodUnit", "");
                    Assert.AreEqual(ExpectedObj.RetentionPeriod.Duration.Value, "-1", "When the retention period is Infinite do not specify the string literal and unit");
                }
            }

            private static TSqlParser CreateParser(bool quotedIdentifierOn = false)
            {
                return new TSql160Parser(quotedIdentifierOn);
            }

            private void VerifyParseAndAccept(VerifyDataRetentionObject[] scriptObjs)
            {
                TSqlParser parser = CreateParser();

                foreach (VerifyDataRetentionObject obj in scriptObjs)
                {
                    using (StringReader reader = new StringReader(obj.SqlString))
                    {
                        IList<ParseError> errors;
                        TSqlFragment node = parser.Parse(reader, out errors);

                        StringBuilder errMsg = new StringBuilder();
                        foreach (ParseError err in errors)
                        {
                            errMsg.AppendLine(err.Message);
                        }
                        Assert.AreEqual(errors.Count, 0, "There are " + errors.Count + " parse errors:\r\n " + errMsg.ToString());

                        // Since there is no parse error
                        // verify the parser properly initialized the node
                        //
                        node.Accept(obj);
                    }
                }
            }

            private void VerifyParseAndReject(VerifyDataRetentionObject[] scriptObjs)
            {
                TSqlParser parser = CreateParser();

                foreach (VerifyDataRetentionObject obj in scriptObjs)
                {
                    using (StringReader reader = new StringReader(obj.SqlString))
                    {
                        IList<ParseError> errors;
                        TSqlFragment node = parser.Parse(reader, out errors);
                        Assert.AreNotEqual(errors.Count, 0, "This script, " + obj.SqlString + ", should have parse errors but does not.");
                    }
                }
            }

            [TestMethod]
            [Priority(1)]
            [Timeout(GlobalConstants.DefaultTestTimeout)]
            [SqlStudioTestCategory(Category.UnitTest, Feature.TSqlModel, TestGroup = TestGroup.Group2)]
            public void DataRetentionAlterTableVerifyParserAccepts()
            {
                //  @"alter table test
                //    set (DATA_DELETION = On (FILTER_COLUMN = [ID]))"
                //
                VerifyDataRetentionObject scriptObject = new VerifyDataRetentionObject("test");
                scriptObject.AlterDataRetentionObject(true, "[ID]");

                //  @"alter Table test1
                //    SET (DATA_DELETION = On (FILTER_COLUMN = [timestamp], RETENTION_PERIOD = 1 day))"
                //
                VerifyDataRetentionObject scriptObject1 = new VerifyDataRetentionObject("test1");
                scriptObject1.AlterDataRetentionObject(true, "[timestamp]", false, "1", TemporalRetentionPeriodUnit.Day);

                //  @"alter Table test2
                //    SET (DATA_DELETION = On (RETENTION_PERIOD = 1 day, FILTER_COLUMN = [timestamp]))"
                //
                VerifyDataRetentionObject scriptObject2 = new VerifyDataRetentionObject("test2");
                scriptObject2.ReverseParameter = true;
                scriptObject2.AlterDataRetentionObject(true, "[timestamp]", false, "1", TemporalRetentionPeriodUnit.Day);

                //    @"alter table test3
                //    set (DATA_DELETION = Off)"
                //
                VerifyDataRetentionObject scriptObject3 = new VerifyDataRetentionObject("test3");
                scriptObject3.AlterDataRetentionObject(false, "");

                VerifyDataRetentionObject[] scriptObjs = new VerifyDataRetentionObject[] {
                scriptObject,
                scriptObject1,
                scriptObject2,
                scriptObject3
            };

                VerifyParseAndAccept(scriptObjs);
            }

            [TestMethod]
            [Priority(1)]
            [Timeout(GlobalConstants.DefaultTestTimeout)]
            [SqlStudioTestCategory(Category.UnitTest, Feature.TSqlModel, TestGroup = TestGroup.Group2)]
            public void DataRetentionAlterTableVerifyParserFails()
            {
                // @"alter table test
                // set (DATA_DELETION = On)",
                //
                VerifyDataRetentionObject scriptObject = new VerifyDataRetentionObject("test");
                scriptObject.AlterDataRetentionObject(true, "");

                // @"Alter Table test1
                // SET (DATA_DELETION = On (RETENTION_PERIOD = 1 Month))",
                // 
                VerifyDataRetentionObject scriptObject1 = new VerifyDataRetentionObject("test1");
                scriptObject1.AlterDataRetentionObject(true, "", false, "1", TemporalRetentionPeriodUnit.Month);

                // @"alter table test2
                // set (DATA_DELETION = Off (FILTER_COLUMN = [ID]))",
                // 
                VerifyDataRetentionObject scriptObject2 = new VerifyDataRetentionObject("test2");
                scriptObject2.AlterDataRetentionObject(false, "[ID]");

                // @"Alter Table test3
                // SET (DATA_DELETION = Off (RETENTION_PERIOD = 1 Month))",
                // 
                VerifyDataRetentionObject scriptObject3 = new VerifyDataRetentionObject("test3");
                scriptObject3.AlterDataRetentionObject(false, "", false, "1", TemporalRetentionPeriodUnit.Month);

                // @"Alter Table test4
                // SET (DATA_DELETION = Off (FILTER_COLUMN = [timestamp], RETENTION_PERIOD = 1 day))",
                // 
                VerifyDataRetentionObject scriptObject4 = new VerifyDataRetentionObject("test4");
                scriptObject4.AlterDataRetentionObject(false, "[timestamp]", false, "1", TemporalRetentionPeriodUnit.Day);

                // @"Alter Table test5
                // SET (DATA_DELETION = Off (RETENTION_PERIOD = 1 day, FILTER_COLUMN = [timestamp]))"
                //
                VerifyDataRetentionObject scriptObject5 = new VerifyDataRetentionObject("test5");
                scriptObject5.ReverseParameter = true;
                scriptObject5.AlterDataRetentionObject(false, "[timestamp]", false, "1", TemporalRetentionPeriodUnit.Day);

                VerifyDataRetentionObject[] scriptObjs = new VerifyDataRetentionObject[] {
                scriptObject,
                scriptObject1,
                scriptObject2,
                scriptObject3,
                scriptObject4,
                scriptObject5
            };

                VerifyParseAndReject(scriptObjs);
            }

            [TestMethod]
            [Priority(1)]
            [Timeout(GlobalConstants.DefaultTestTimeout)]
            [SqlStudioTestCategory(Category.UnitTest, Feature.TSqlModel, TestGroup = TestGroup.Group2)]
            public void DataRetentionCreateTableVerifyParserAccepts()
            {
                // create Table test4 (id datetime, timestamp datetime2 )
                // WITH (DATA_DELETION = On (FILTER_COLUMN = [timestamp], RETENTION_PERIOD = 1 day))
                //
                VerifyDataRetentionObject scriptObj1 = new VerifyDataRetentionObject("test4");
                scriptObj1.CreateDataRetentionObject(true, "timestamp", "1", TemporalRetentionPeriodUnit.Day);

                // create Table test3 (id datetime, timestamp datetime2 )
                // WITH (DATA_DELETION = On (FILTER_COLUMN = [timestamp]))
                //
                VerifyDataRetentionObject scriptObj2 = new VerifyDataRetentionObject("test3");
                scriptObj2.CreateDataRetentionObject(true, "[table space]");

                // create Table test4 (id datetime, timestamp datetime2 )
                // WITH (DATA_DELETION = On (RETENTION_PERIOD = 1 day, FILTER_COLUMN = [timestamp]))
                //
                VerifyDataRetentionObject scriptObj3 = new VerifyDataRetentionObject("test5");
                scriptObj3.ReverseParameter = true;
                scriptObj3.CreateDataRetentionObject(true, "timestamp", "1", TemporalRetentionPeriodUnit.Day);

                //  @"create table test2 (id datetime, timestamp datetime2 )
                //    WITH (DATA_DELETION = Off)"
                //
                VerifyDataRetentionObject scriptObj4 = new VerifyDataRetentionObject("test5");
                scriptObj4.CreateDataRetentionObject(false, "");

                VerifyDataRetentionObject[] scriptObjs = new VerifyDataRetentionObject[] {
                scriptObj1,
                scriptObj2,
                scriptObj3,
                scriptObj4 
            };

                VerifyParseAndAccept(scriptObjs);
            }

            [TestMethod]
            [Priority(1)]
            [Timeout(GlobalConstants.DefaultTestTimeout)]
            [SqlStudioTestCategory(Category.UnitTest, Feature.TSqlModel, TestGroup = TestGroup.Group2)]
            public void DataRetentionCreateTableVerifyParserFails()
            {
                // @"create table test2 (id datetime, timestamp datetime2 )
                //    WITH (DATA_DELETION = On)"
                //
                VerifyDataRetentionObject scriptObj1 = new VerifyDataRetentionObject("test2");
                scriptObj1.CreateDataRetentionObject(true, "");

                //  @"create Table test4 (id datetime, timestamp datetime2)
                //    WITH (DATA_DELETION = On (RETENTION_PERIOD = 1 Month))"
                //
                VerifyDataRetentionObject scriptObj2 = new VerifyDataRetentionObject("test4");
                scriptObj2.CreateDataRetentionObject(true, "", "1", TemporalRetentionPeriodUnit.Month);

                // @"create table test25 (id datetime, timestamp datetime2 )
                //   WITH (DATA_DELETION = Off (FILTER_COLUMN = [ID]))"
                //
                VerifyDataRetentionObject scriptObj3 = new VerifyDataRetentionObject("test6");
                scriptObj3.CreateDataRetentionObject(false, "[ID]");

                // @"create Table test7 (id datetime, timestamp datetime2)
                //   WITH (DATA_DELETION = Off (RETENTION_PERIOD = 1 Month))"
                VerifyDataRetentionObject scriptObj4 = new VerifyDataRetentionObject("test7");
                scriptObj4.CreateDataRetentionObject(false, "1", TemporalRetentionPeriodUnit.Month);

                // @"create Table test8 (id datetime, timestamp datetime2 )
                // WITH (DATA_DELETION = Off (FILTER_COLUMN = [timestamp], RETENTION_PERIOD = 1 day))
                VerifyDataRetentionObject scriptObj5 = new VerifyDataRetentionObject("test8");
                scriptObj5.CreateDataRetentionObject(false, "[timestamp]", "1", TemporalRetentionPeriodUnit.Month);

                // @"create Table test5 (id datetime, timestamp datetime2 )
                // WITH (DATA_DELETION = Off (RETENTION_PERIOD = 1 day, FILTER_COLUMN = [timestamp]))"
                VerifyDataRetentionObject scriptObj6 = new VerifyDataRetentionObject("test9");
                scriptObj6.ReverseParameter = true;
                scriptObj6.CreateDataRetentionObject(false, "[timestamp]", "1", TemporalRetentionPeriodUnit.Day);

                VerifyDataRetentionObject[] scriptObjs = new VerifyDataRetentionObject[] {
                scriptObj1,
                scriptObj2,
                scriptObj3,
                scriptObj4,
                scriptObj5,
                scriptObj6
            };
                VerifyParseAndReject(scriptObjs);
            }

        }
    }
}
