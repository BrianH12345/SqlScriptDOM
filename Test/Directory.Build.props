<?xml version="1.0" encoding="utf-8"?>
<Project>
  <Import Project="$([MSBuild]::GetPathOfFileAbove('Directory.Build.props', '$(MSBuildThisFileDirectory)../'))" />
  <PropertyGroup>
    <!--
      $(MSBuildAllProjects) is a list of files that determine if a project is up-to-date or not.  By including this
      file in the list, it ensures that all projects will be rebuilt if it changes.
    -->
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
    <RunCodeAnalysis>false</RunCodeAnalysis>
    <!-- DEVNOTE(MatteoT): None of the projects under this folder can be packaged into a NuPkg file  -->
    <IsPackable>false</IsPackable>
    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
  </PropertyGroup>

  <!-- We should probably consolidate this with Source\Directory.Build.props into root -->
  <PropertyGroup Label="Common properties for projects">
    <!-- See https://docs.microsoft.com/visualstudio/msbuild/common-msbuild-project-properties. -->

    <!-- Use this property for convenience to build a path starting from the root of the repository. -->

    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>

    <TargetFolder Condition="'$(TargetFolder)'==''">out</TargetFolder>
    <BaseOutputPath Condition="'$(BaseOutputPath)'==''">$(EnlistmentRoot)\$(TargetFolder)</BaseOutputPath>
    <OutputPath>$(BaseOutputPath)\$(Configuration)</OutputPath>

    <!-- put obj files in a mirror tree off the root to keep the src folder tree cleaner -->
    <BaseIntermediateOutputPath Condition=" '$(BaseIntermediateOutputPath)' == '' ">$(EnlistmentRoot)\obj\$([MSBuild]::MakeRelative('$(EnlistmentRoot)\', $(MSBuildProjectDirectory)))</BaseIntermediateOutputPath>

    <!-- By default, we build all projects for these TargetFrameworks. 
         We cannot target netcore (e.g. net5.0/net6.0) simply because
         most (or all?) the .cs files have conditional compilation based on
         NETSTANDARD2_1 and are not very forward-looking (maybe intentionally?)
    -->
    <!-- Tests currently only work for netfx -->
    <TargetFrameworks>$(NetfxVersion)</TargetFrameworks>

    <!-- The TargetGroup can be used to express condition that are common to more than one TargetFramework (currently not used)-->
    <TargetGroup Condition="'$(TargetFramework)'=='netstandard2.0' Or '$(TargetFramework)'=='netstandard2.1' Or '$(TargetFramework)'=='netstandard2.2'">netstandard</TargetGroup>
    <TargetGroup Condition="'$(TargetFramework)'=='netcoreapp3.1' Or '$(TargetFramework)'=='net5.0' Or '$(TargetFramework)'=='net6.0'">netcore</TargetGroup>
    <TargetGroup Condition="'$(TargetGroup)'==''">netfx</TargetGroup>

    <!-- Nuget specific properties. See https://docs.microsoft.com/nuget/reference/msbuild-targets. -->
    <!-- -->
    <!-- Enable restoring projects with packages.config -->
    <!-- <RestorePackagesConfig>true</RestorePackagesConfig> -->

    <!-- Enable optimized NuGet restore -->
    <RestoreUseStaticGraphEvaluation>true</RestoreUseStaticGraphEvaluation>

    <!-- Produce deterministic assemblies, requirement for ProduceReferenceAssembly -->
    <!-- <Deterministic>true</Deterministic> -->

    <!-- Common runsettings for all test projects, this is generated by Test\Common\GenerateRunSettings -->
    <RunSettingsFilePath>$(OutputPath)\$(TargetFramework)\test.runsettings</RunSettingsFilePath>
  </PropertyGroup>

  <!-- The default PDB type is now "portable" which is fine for most uses. However, we may need full PDBs in a few cases:
       1. For SSMS and SQL engine builds which are indexed and need to be debuggable by pre-vs2019 (this could be less of a concern going forward)
       2. Debug net462 builds which are used for code coverage (currently code coverage is not wired up)
       3. SDL tools like BinSkim (to be confirmed)
  -->
  <PropertyGroup Condition="'$(Configuration)|$(TargetGroup)' == 'Release|netfx'">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(TargetGroup)'=='Debug|netfx'">
    <DebugType>full</DebugType>
    <DebugSymbols>true</DebugSymbols>
  </PropertyGroup>

  <!-- Don't enable localization in tests -->
  <PropertyGroup>
    <EnableLocalization>false</EnableLocalization>
  </PropertyGroup>

</Project>