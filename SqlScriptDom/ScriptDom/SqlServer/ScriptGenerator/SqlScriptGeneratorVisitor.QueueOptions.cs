//------------------------------------------------------------------------------
// <copyright file="SqlScriptGeneratorVisitor.QueueOptions.cs" company="Microsoft">
//         Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

namespace Microsoft.SqlServer.TransactSql.ScriptDom.ScriptGenerator
{
    partial class SqlScriptGeneratorVisitor
    {
        private static Dictionary<QueueOptionKind, String> _queueOptionTypeNames = new Dictionary<QueueOptionKind, String>()
        {
            // exclude this one: handled specially
            {QueueOptionKind.ActivationDrop, CodeGenerationSupporter.Drop},
            
            // exclude this one: handled specially
            //{QueueOptionType.ActivationExecuteAs, CodeGenerationSupporter},

            {QueueOptionKind.ActivationMaxQueueReaders, CodeGenerationSupporter.MaxQueueReaders},
            {QueueOptionKind.ActivationProcedureName, CodeGenerationSupporter.ProcedureName},
            {QueueOptionKind.ActivationStatus, CodeGenerationSupporter.Status},
            {QueueOptionKind.Retention, CodeGenerationSupporter.Retention},
            {QueueOptionKind.Status, CodeGenerationSupporter.Status},
        };

        public override void ExplicitVisit(QueueStateOption node)
        {
            if (node.OptionKind == QueueOptionKind.PoisonMessageHandlingStatus)
            {
                GenerateIdentifier(CodeGenerationSupporter.PoisonMessageHandling);
                GenerateSymbol(TSqlTokenType.LeftParenthesis);
                GenerateOptionStateWithEqualSign(CodeGenerationSupporter.Status, node.OptionState);
                GenerateSymbol(TSqlTokenType.RightParenthesis);
            }
            else
            {
                String optionName = GetValueForEnumKey(_queueOptionTypeNames, node.OptionKind);
                if (optionName != null)
                {
                    // ACTIVATION is generated by CreateQueueStatement and AlterQueueStatement

                    GenerateOptionStateWithEqualSign(optionName, node.OptionState);
                }
            }
        }

        protected void GenerateQueueOptions(IList<QueueOption> queueOptions)
        {
            // QueueOption could be QueueStateOption
            //                      QueueTSqlFragmentOption

            List<QueueOption> regularOptions = new List<QueueOption>();
            List<QueueOption> activationOptions = new List<QueueOption>();

            foreach (var item in queueOptions)
            {
                switch (item.OptionKind)
                {
                    case QueueOptionKind.Status:
                    case QueueOptionKind.Retention:
                    case QueueOptionKind.PoisonMessageHandlingStatus:
                        regularOptions.Add(item);
                        break;
                    case QueueOptionKind.ActivationStatus:
                    case QueueOptionKind.ActivationProcedureName:
                    case QueueOptionKind.ActivationMaxQueueReaders:
                    case QueueOptionKind.ActivationExecuteAs:
                    case QueueOptionKind.ActivationDrop:
                        activationOptions.Add(item);
                        break;
                    default:
                        System.Diagnostics.Debug.Assert(false, "Unknown queue option type");
                        break;
                }
            }

            GenerateCommaSeparatedList(regularOptions);

            if (regularOptions.Count > 0 && activationOptions.Count > 0)
            {
                GenerateSymbolAndSpace(TSqlTokenType.Comma);
            }

            if (activationOptions.Count > 0)
            {
                GenerateIdentifier(CodeGenerationSupporter.Activation);
                GenerateSpace();
                GenerateParenthesisedCommaSeparatedList(activationOptions);
            }
        }

        public override void ExplicitVisit(QueueOption node)
        {
            if (node.OptionKind == QueueOptionKind.ActivationDrop)
            {
                GenerateKeyword(TSqlTokenType.Drop);
            }
        }

        public override void ExplicitVisit(QueueProcedureOption node)
        {
        	String optionName = GetValueForEnumKey(_queueOptionTypeNames, node.OptionKind);
            if (optionName != null)
            {
                GenerateNameEqualsValue(optionName, node.OptionValue);
            }
        }

        public override void ExplicitVisit(QueueValueOption node)
        {
            String optionName = GetValueForEnumKey(_queueOptionTypeNames, node.OptionKind);
            if (optionName != null)
            {
                GenerateNameEqualsValue(optionName, node.OptionValue);
            }
        }

        public override void ExplicitVisit(QueueExecuteAsOption node)
        {
            GenerateFragmentIfNotNull(node.OptionValue);
        }

    }
}
