//------------------------------------------------------------------------------
// <copyright file="SqlScriptGenerator.cs" company="Microsoft">
//         Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Globalization;
using System.Text;
using Microsoft.SqlServer.TransactSql.ScriptDom.ScriptGenerator;
using Microsoft.SqlServer.TransactSql.ScriptDom.Versioning;

namespace Microsoft.SqlServer.TransactSql.ScriptDom
{
    /// <summary>
    /// Sql specific script generator.
    /// </summary>
    public abstract class SqlScriptGenerator
    {
        private SqlScriptGeneratorOptions _options;

        /// <summary>
        /// Initializes a new instance of the <see cref="SqlScriptGenerator"/> class.
        /// </summary>
        /// <param name="options">The options.</param>
        protected SqlScriptGenerator(SqlScriptGeneratorOptions options)
        {
            ScriptGeneratorSupporter.CheckForNullReference(options, "options");

            this._options = options;
        }

        /// <summary>
        /// Gets the options.
        /// </summary>
        /// <value>The options.</value>
        public SqlScriptGeneratorOptions Options
        {
            get { return _options; }
        }

        // TODO, jacl: this method should return a string, rather than use an out parameter (even though it lacks symmetry with the above call... note that the above call is possible without the out...)
        /// <summary>
        /// Populates the writer with a script with the scriptFragment.
        /// </summary>
        /// <param name="scriptFragment">The script fragment to generate script for.</param>
        /// <param name="script">The generated script.</param>
        public void GenerateScript(TSqlFragment scriptFragment, out String script)
        {
            StringBuilder builder = new StringBuilder();
            using (StringWriter writer = new StringWriter(builder, CultureInfo.InvariantCulture))
            {
                GenerateScript(scriptFragment, writer);
            }
            script = builder.ToString();
        }

        // TODO, jacl: this method should return a string, rather than use an out parameter (even though it lacks symmetry with the above call... note that the above call is possible without the out...)
        /// <summary>
        /// Populates the writer with a script with the scriptFragment.
        /// </summary>
        /// <param name="scriptFragment">The script fragment to generate script for.</param>
        /// <param name="script">The generated script.</param>
        /// <param name="versioningErrors">The engine type-specific error list.</param>
        public void GenerateScript(TSqlFragment scriptFragment, out String script, out IList<ParseError> versioningErrors)
        {
            StringBuilder builder = new StringBuilder();

            VersioningVisitor versioningVisitor = new VersioningVisitor(_options);
            VersionCheck(scriptFragment, versioningVisitor);
            versioningErrors = versioningVisitor.GetErrors();

            using (StringWriter writer = new StringWriter(builder, CultureInfo.InvariantCulture))
            {
                GenerateScript(scriptFragment, writer);
            }
            script = builder.ToString();
        }

        /// <summary>
        /// Generates text representing the specified script fragment
        /// </summary>
        /// <param name="scriptFragment">The fragment of script to generate tokens for</param>
        /// <param name="writer">A text writer to write the text to</param>
        public void GenerateScript(TSqlFragment scriptFragment, TextWriter writer)
        {
            ScriptGeneratorSupporter.CheckForNullReference(scriptFragment, "scriptFragment");
            ScriptGeneratorSupporter.CheckForNullReference(writer, "writer");

            if (scriptFragment == null)
            {
                throw new ArgumentException(SqlScriptGeneratorResource.ScriptDomTreeTypeNotSupported, "scriptFragment");
            }

            ScriptWriter scriptWriter = WriteScript(scriptFragment);
            scriptWriter.WriteTo(writer);
        }

        /// <summary>
        /// Generates a list of tokens representing the script generated by the specified
        /// script fragment
        /// </summary>
        /// <param name="scriptFragment">The fragment of script to generate tokens for</param>
        /// <returns>A object capable of enumerating a list of tokens</returns>
        public IList<TSqlParserToken> GenerateTokens(TSqlFragment scriptFragment)
        {
            ScriptGeneratorSupporter.CheckForNullReference(scriptFragment, "scriptFragment");

            ScriptWriter scriptWriter = WriteScript(scriptFragment);
            IList<TSqlParserToken> tokens = new List<TSqlParserToken>();
            scriptWriter.WriteTo(tokens);
            return tokens;
        }

        internal abstract SqlScriptGeneratorVisitor CreateSqlScriptGeneratorVisitor(SqlScriptGeneratorOptions options, ScriptWriter scriptWriter);

        /// <summary>
        /// Create a ScriptWriter for a given TSqlFragment
        /// </summary>
        /// <param name="scriptFragment"></param>
        /// <returns></returns>
        private ScriptWriter WriteScript(TSqlFragment scriptFragment)
        {
            ScriptWriter scriptWriter = new ScriptWriter(_options);
            SqlScriptGeneratorVisitor visitor = CreateSqlScriptGeneratorVisitor(_options, scriptWriter);
            scriptFragment.Accept(visitor);
            return scriptWriter;
        }
        
         /// <summary>
        /// Is the syntax supported for the requested version?
        /// </summary>
        /// <param name="scriptFragment"></param>
        /// <param name="versioningVisitor"></param>
        /// <returns></returns>
        private void VersionCheck(TSqlFragment scriptFragment, VersioningVisitor versioningVisitor)
        {
            ScriptGeneratorSupporter.CheckForNullReference(scriptFragment, "scriptFragment");

            scriptFragment.Accept(versioningVisitor);
        }
    }
}
